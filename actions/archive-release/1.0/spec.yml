# Copyright (c) 2021 Terminus, Inc.
#
# This program is free software: you can use, redistribute, and/or modify
# it under the terms of the GNU Affero General Public License, version 3
# or later ("AGPL"), as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

name: archive-release
displayName: ${{ i18n.displayName }}
logoUrl: //terminus-paas.oss-cn-hangzhou.aliyuncs.com/paas-doc/2021/04/14/1a196371-6cb6-4095-9928-3595d1222e66.png
version: "1.0"
type: action
category: deploy_management
desc: ${{ i18n.desc }}

public: true
supportedErdaVersions:
  - ">=1.0"

params:
  - name: workdir
    desc: ${{ i18n.params.workdir.desc }}
    default: ${git-checkout}

  - name: migrationsDir
    desc: ${{ i18n.params.migrationsDir.desc }}
    type: string
    default: ""
    required: false

  - name: lint_config
    type: string
    desc: ${{ i18n.params.lint_config.desc }}
    default: ""
    required: false

  - name: releaseID
    desc: ${{ i18n.params.releaseID.desc }}
    type: string
    default: ${release:OUTPUT:releaseID}
    required: true

  - name: ossEndpoint
    type: string
    desc: ${{ i18n.params.ossEndpoint.desc }}
    required: true
    default: oss-cn-hangzhou.aliyuncs.com

  - name: ossBucket
    type: string
    desc: ${{ i18n.params.ossBucket.desc }}
    required: true

  - name: ossPath
    type: string
    desc: ${{ i18n.params.ossPath.desc }}
    required: false

  - name: gitref
    type: string
    desc: ${{ i18n.params.gitref.desc }}
    required: false

  - name: ossAccessKeyID
    type: string
    desc: OSS Access Key
    required: true

  - name: ossAccessKeySecret
    type: string
    desc: OSS Access Key Secret
    required: true

  - name: ossArchivedDir
    type: string
    desc: ${{ i18n.params.ossArchivedDir.desc }}
    required: true
    default: archived-versions

  - name: releaseName
    type: string
    desc: ${{ i18n.params.releaseName.desc }}
    required: false

  - name: registry_replacement
    type: struct
    desc: ${{ i18n.params.registry_replacement.desc }}
    required: false
    struct:
      - { name: old, type: string, default: , desc: ${{ i18n.params.registry_replacement.struct.old.desc }} }
      - { name: new, type: string, default: , desc: ${{ i18n.params.registry_replacement.struct.new.desc }} }

  - name: securityContext
    type: string_array
    desc: ${{ i18n.params.securityContext.desc }}
    required: false

accessibleAPIs:
  - path: /api/repo/<*>
    method: POST
    schema: http

  - path: /api/releases/<releaseId>/actions/get-dice
    method: GET
    schema: http
locale:
  zh-CN:
    desc: >-
      从源仓库将制品快照和数据迁移脚本归档到目标（version）仓库。源仓库一般就是当前仓库。
      当前仓库的 <.dice|.erda>/migrations 归档到目标仓库的 <version>/sqls 。
      应用打包发布的制品归档到目标仓库的 <version>/releases/<snapName>/dice.yml 。
    displayName: Erda 制品归档
    params.gitref.desc: 用于生成<版本号>。如 v1.1.0 => v1.1.0, release/1.1 => v1.1。gitref 和 ossPath 至少应当设置一个。
    params.lint_config.desc: Erda MySQL Migration Lint 的配置文件所在路径, 为空则不对配置文件进行归档。
    params.migrationsDir.desc: migrations 脚本所在目录, 为空则不对 migrations 脚本进行归档。
    params.ossArchivedDir.desc: 用于生成归档的路径。如不设置，默认为 'archived-versions'
    params.ossBucket.desc: OSS bucket, 如 erda-release
    params.ossEndpoint.desc: OSS 域名, 默认 oss-cn-hangzhou.aliyuncs.com
    params.ossPath.desc: OSS 中存放归档后物料的路径, 如不设置，则配置为`<ossArchiveDir>/<版本号>`
    params.registry_replacement.desc: dice.yml 中要替换的 registry 地址
    params.registry_replacement.struct.new.desc: 要替换的目标 registry host, 为空时不会发生替换
    params.registry_replacement.struct.old.desc: 要替换的原始 registry host, 为空时 action 会自动识别 registy host 并替换
    params.releaseID.desc: 应用打包发布制品的 releaseID, 默认为 ${release:OUTPUT:releaseID}
    params.releaseName.desc: 制品名称, 如为空, 就以仓库名称作为制品名称
    params.securityContext.desc: 令服务的 k8s_snippet.container.securityContext.privileged=true
    params.workdir.desc: 仓库目录, 默认为 ${git-checkout}。action 从仓库中读取 migrations 脚本等。
  en-US:
    desc: >-
      Archive artifact snapshots and data migration scripts from the source repository to the target (version) repository. The source repository is generally the current repository. Archive the <.dice|.erda>/migrations of the current repository to <version>/sqls of the target repository. Archive artifacts released by application packaging to <version>/releases/<snapName>/dice.yml in the target repository.
    displayName: Erda artifact archive
    params.gitref.desc: Used to generate <version number>. For example, v1.1.0 => v1.1.0, release/1.1 => v1.1. At least one of gitref and ossPath should be set.
    params.lint_config.desc: The path of the configuration file of Erda MySQL migration lint. If it is empty, the configuration file will not be archived.
    params.migrationsDir.desc: The directory where the migrations script is located. If it is empty, the migrations script will not be archived.
    params.ossArchivedDir.desc: Used to generate the archive path. If not set, it is archived-versions by default.
    params.ossBucket.desc: OSS bucket, such as erda-release
    params.ossEndpoint.desc: OSS domain name, which is oss-cn-hangzhou.aliyuncs.com by default
    params.ossPath.desc: The path to the archived material in OSS. If not set, it will be configured as `<ossArchiveDir>/<version number>`
    params.registry_replacement.desc: registry address to replace in Dice.yml
    params.registry_replacement.struct.new.desc: The target registry host to replace, No substitution occurs when empty
    params.registry_replacement.struct.old.desc: The original registry host to be replaced, When empty, the action will automatically recognize the registry host and replace it
    params.releaseID.desc: The release ID of the artifact released by application packaging, which is ${release:OUTPUT:releaseID} by default.
    params.releaseName.desc: The artifact name. If it is empty, use the repository name as the artifact name.
    params.securityContext.desc: Make the service's k8s_snippet.container.securityContext.privileged=true
    params.workdir.desc: The repository directory, which is ${git-checkout} by default. Action reads migrations scripts, etc. from the repository.
